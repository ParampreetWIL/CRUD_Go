// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"

)

const addTask = `-- name: AddTask :one
INSERT INTO tasks (
	name,
	info,
	isDone
) VALUES (
	$1, $2, false
)
RETURNING id, name, info, isdone
`

type AddTaskParams struct {
	Name string
	Info string
}

func (q *Queries) AddTask(ctx context.Context, arg AddTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, addTask, arg.Name, arg.Info)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Info,
		&i.Isdone,
	)
	return i, err
}

const addUser = `-- name: AddUser :one
INSERT INTO users (
	email_token,
	jwt_token,
	name
) VALUES (
	$1, $2, $3
)
RETURNING id, email_token, jwt_token, name, created_at, updated_at
`

type AddUserParams struct {
	EmailToken string
	JwtToken   string
	Name       string
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.db.QueryRow(ctx, addUser, arg.EmailToken, arg.JwtToken, arg.Name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.EmailToken,
		&i.JwtToken,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTasks = `-- name: DeleteTasks :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTasks(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTasks, id)
	return err
}

const getAllTasks = `-- name: GetAllTasks :many
SELECT id, name, info, isdone FROM tasks
`

func (q *Queries) GetAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, getAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Info,
			&i.Isdone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDoneTasks = `-- name: GetDoneTasks :many
SELECT id, name, info, isdone FROM tasks
WHERE isDone = true
`

func (q *Queries) GetDoneTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, getDoneTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Info,
			&i.Isdone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPendingTasks = `-- name: GetPendingTasks :many
SELECT id, name, info, isdone FROM tasks
WHERE isDone = false
`

func (q *Queries) GetPendingTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, getPendingTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Info,
			&i.Isdone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByJWT = `-- name: GetUserByJWT :many
SELECT id, email_token, jwt_token, name, created_at, updated_at FROM users 
WHERE jwt_token = $1
`

func (q *Queries) GetUserByJWT(ctx context.Context, jwtToken string) ([]User, error) {
	rows, err := q.db.Query(ctx, getUserByJWT, jwtToken)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.EmailToken,
			&i.JwtToken,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
	set name = $2,
	info = $3,
	isDone = $4
WHERE id = $1
`

type UpdateTaskParams struct {
	ID     int64
	Name   string
	Info   string
	Isdone bool
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.Exec(ctx, updateTask,
		arg.ID,
		arg.Name,
		arg.Info,
		arg.Isdone,
	)
	return err
}

const updateTaskAsDone = `-- name: UpdateTaskAsDone :exec
UPDATE tasks
	SET isDone = true
WHERE id = $1
`

func (q *Queries) UpdateTaskAsDone(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateTaskAsDone, id)
	return err
}

const updateTaskAsNotDone = `-- name: UpdateTaskAsNotDone :exec
UPDATE tasks
	SET isDone = false
WHERE id = $1
`

func (q *Queries) UpdateTaskAsNotDone(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateTaskAsNotDone, id)
	return err
}
